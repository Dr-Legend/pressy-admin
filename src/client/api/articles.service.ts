/**
 * Pressy Admin API
 * Cœur du système pressy
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { ArticleDto } from '../model/articleDto';
import { CreateArticleRequestDto } from '../model/createArticleRequestDto';


@injectable()
export class ArticlesService {
    private basePath: string = 'http://localhost:3002/v1';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * 
     * @param request 
     
     */
    public articleCreateArticle(request: CreateArticleRequestDto, observe?: 'body', headers?: Headers): Observable<ArticleDto>;
    public articleCreateArticle(request: CreateArticleRequestDto, observe?: 'response', headers?: Headers): Observable<HttpResponse<ArticleDto>>;
    public articleCreateArticle(request: CreateArticleRequestDto, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!request){
            throw new Error('Required parameter request was null or undefined when calling articleCreateArticle.');
        }

        // authentication (Bearer) required
        if (this.APIConfiguration.apiKeys["Authorization"]) {
            headers['Authorization'] = this.APIConfiguration.apiKeys["Authorization"];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ArticleDto>> = this.httpClient.post(`${this.basePath}/article`, request , headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * 
     
     */
    public articleGetAllArticles(observe?: 'body', headers?: Headers): Observable<Array<ArticleDto>>;
    public articleGetAllArticles(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<ArticleDto>>>;
    public articleGetAllArticles(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (Bearer) required
        if (this.APIConfiguration.apiKeys["Authorization"]) {
            headers['Authorization'] = this.APIConfiguration.apiKeys["Authorization"];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<ArticleDto>>> = this.httpClient.get(`${this.basePath}/article`, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
