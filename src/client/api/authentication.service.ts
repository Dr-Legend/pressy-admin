/**
 * Pressy Admin API
 * Cœur du système pressy
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { AuthCredentialsDto } from '../model/authCredentialsDto';
import { LoginRequestDto } from '../model/loginRequestDto';
import { RefreshCredentialsRequestDto } from '../model/refreshCredentialsRequestDto';

import { TYPES }  from '../variables';

@injectable()
export class AuthenticationService {
    
    @inject(TYPES.IApiHttpClient) private httpClient: IHttpClient;
    @inject(TYPES.IAPIConfiguration) private APIConfiguration: IAPIConfiguration;
    get basePath(): string {
        return this.APIConfiguration.basePath || 'http://localhost:3002/v1';
    }

    /**
     * 
     * 
     * @param request 
     
     */
    public authLogin(request: LoginRequestDto, observe?: 'body', headers?: Headers): Observable<AuthCredentialsDto>;
    public authLogin(request: LoginRequestDto, observe?: 'response', headers?: Headers): Observable<HttpResponse<AuthCredentialsDto>>;
    public authLogin(request: LoginRequestDto, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!request){
            throw new Error('Required parameter request was null or undefined when calling authLogin.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<AuthCredentialsDto>> = this.httpClient.post(`${this.basePath}/auth/login`, request , headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * 
     * @param request 
     
     */
    public authRefreshCredentials(request: RefreshCredentialsRequestDto, observe?: 'body', headers?: Headers): Observable<AuthCredentialsDto>;
    public authRefreshCredentials(request: RefreshCredentialsRequestDto, observe?: 'response', headers?: Headers): Observable<HttpResponse<AuthCredentialsDto>>;
    public authRefreshCredentials(request: RefreshCredentialsRequestDto, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!request){
            throw new Error('Required parameter request was null or undefined when calling authRefreshCredentials.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<AuthCredentialsDto>> = this.httpClient.post(`${this.basePath}/auth/refresh`, request , headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
