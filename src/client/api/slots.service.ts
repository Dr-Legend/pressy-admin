/**
 * Pressy Admin API
 * Cœur du système pressy
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { CreateSlotRequestDto } from '../model/createSlotRequestDto';
import { DeleteSlotRequest } from '../model/deleteSlotRequest';
import { EditSlotRequestDto } from '../model/editSlotRequestDto';
import { SlotDto } from '../model/slotDto';


@injectable()
export class SlotsService {
    private basePath: string = 'https://pressy-admin-api-dev.herokuapp.com/v1';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * 
     * @param request 
     
     */
    public slotCreateSlot(request: CreateSlotRequestDto, observe?: 'body', headers?: Headers): Observable<SlotDto>;
    public slotCreateSlot(request: CreateSlotRequestDto, observe?: 'response', headers?: Headers): Observable<HttpResponse<SlotDto>>;
    public slotCreateSlot(request: CreateSlotRequestDto, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!request){
            throw new Error('Required parameter request was null or undefined when calling slotCreateSlot.');
        }

        // authentication (Bearer) required
        if (this.APIConfiguration.apiKeys["Authorization"]) {
            headers['Authorization'] = this.APIConfiguration.apiKeys["Authorization"];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<SlotDto>> = this.httpClient.post(`${this.basePath}/slot`, request , headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * 
     * @param request 
     
     */
    public slotDeleteSlot(request: DeleteSlotRequest, observe?: 'body', headers?: Headers): Observable<any>;
    public slotDeleteSlot(request: DeleteSlotRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public slotDeleteSlot(request: DeleteSlotRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!request){
            throw new Error('Required parameter request was null or undefined when calling slotDeleteSlot.');
        }

        // authentication (Bearer) required
        if (this.APIConfiguration.apiKeys["Authorization"]) {
            headers['Authorization'] = this.APIConfiguration.apiKeys["Authorization"];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/slot`, request , headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * 
     * @param request 
     
     */
    public slotEditSlot(request: EditSlotRequestDto, observe?: 'body', headers?: Headers): Observable<SlotDto>;
    public slotEditSlot(request: EditSlotRequestDto, observe?: 'response', headers?: Headers): Observable<HttpResponse<SlotDto>>;
    public slotEditSlot(request: EditSlotRequestDto, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!request){
            throw new Error('Required parameter request was null or undefined when calling slotEditSlot.');
        }

        // authentication (Bearer) required
        if (this.APIConfiguration.apiKeys["Authorization"]) {
            headers['Authorization'] = this.APIConfiguration.apiKeys["Authorization"];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<SlotDto>> = this.httpClient.patch(`${this.basePath}/slot`, request , headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * 
     * @param type 
     
     */
    public slotGetSlots(type?: string, observe?: 'body', headers?: Headers): Observable<Array<SlotDto>>;
    public slotGetSlots(type?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<SlotDto>>>;
    public slotGetSlots(type?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push("type="+encodeURIComponent(String(type)));
        }

        // authentication (Bearer) required
        if (this.APIConfiguration.apiKeys["Authorization"]) {
            headers['Authorization'] = this.APIConfiguration.apiKeys["Authorization"];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<SlotDto>>> = this.httpClient.get(`${this.basePath}/slot?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
