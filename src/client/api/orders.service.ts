/**
 * Pressy Admin API
 * Cœur du système pressy
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { AssignOrderDriverRequestDto } from '../model/assignOrderDriverRequestDto';
import { EditOrderRequestDto } from '../model/editOrderRequestDto';
import { OrderDto } from '../model/orderDto';
import { TYPES } from "../variables";

@injectable()
export class OrdersService {
    
    @inject(TYPES.IApiHttpClient) private httpClient: IHttpClient;
    @inject(TYPES.IAPIConfiguration) private APIConfiguration: IAPIConfiguration;
    get basePath(): string {
        return this.APIConfiguration.basePath || 'http://localhost:3002/v1';
    }

    /**
     * 
     * 
     * @param orderMissionType 
     * @param request 
     
     */
    public orderAssignDriverToOrder(orderMissionType: string, request: AssignOrderDriverRequestDto, observe?: 'body', headers?: Headers): Observable<any>;
    public orderAssignDriverToOrder(orderMissionType: string, request: AssignOrderDriverRequestDto, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public orderAssignDriverToOrder(orderMissionType: string, request: AssignOrderDriverRequestDto, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!orderMissionType){
            throw new Error('Required parameter orderMissionType was null or undefined when calling orderAssignDriverToOrder.');
        }

        if (!request){
            throw new Error('Required parameter request was null or undefined when calling orderAssignDriverToOrder.');
        }

        // authentication (Bearer) required
        if (this.APIConfiguration.apiKeys["Authorization"]) {
            headers['Authorization'] = this.APIConfiguration.apiKeys["Authorization"];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/order/assign-driver/${encodeURIComponent(String(orderMissionType))}`, request , headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * 
     * @param request 
     
     */
    public orderEditOrder(request: EditOrderRequestDto, observe?: 'body', headers?: Headers): Observable<OrderDto>;
    public orderEditOrder(request: EditOrderRequestDto, observe?: 'response', headers?: Headers): Observable<HttpResponse<OrderDto>>;
    public orderEditOrder(request: EditOrderRequestDto, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!request){
            throw new Error('Required parameter request was null or undefined when calling orderEditOrder.');
        }

        // authentication (Bearer) required
        if (this.APIConfiguration.apiKeys["Authorization"]) {
            headers['Authorization'] = this.APIConfiguration.apiKeys["Authorization"];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<OrderDto>> = this.httpClient.patch(`${this.basePath}/order`, request , headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * 
     * @param length 
     * @param page 
     
     */
    public orderGetOrders(length?: number, page?: number, observe?: 'body', headers?: Headers): Observable<Array<OrderDto>>;
    public orderGetOrders(length?: number, page?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<OrderDto>>>;
    public orderGetOrders(length?: number, page?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (length !== undefined) {
            queryParameters.push("length="+encodeURIComponent(String(length)));
        }
        if (page !== undefined) {
            queryParameters.push("page="+encodeURIComponent(String(page)));
        }

        // authentication (Bearer) required
        if (this.APIConfiguration.apiKeys["Authorization"]) {
            headers['Authorization'] = this.APIConfiguration.apiKeys["Authorization"];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<OrderDto>>> = this.httpClient.get(`${this.basePath}/order?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * 
     * @param id 
     
     */
    public orderReportAbsent(id: number, observe?: 'body', headers?: Headers): Observable<any>;
    public orderReportAbsent(id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public orderReportAbsent(id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling orderReportAbsent.');
        }

        // authentication (Bearer) required
        if (this.APIConfiguration.apiKeys["Authorization"]) {
            headers['Authorization'] = this.APIConfiguration.apiKeys["Authorization"];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/order/apply-absent-penalty/${encodeURIComponent(String(id))}`, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
